
const Max  = 9
const MCar = 4

// models passenger arrival at the platform
PASSENGERS = (newPassenger -> PASSENGERS).

// limits passengers on platfrom to Max & allocates passengers to cars (2nd method -with boolean variable)
CONTROLLER        
    = CONTROL[0][0][0],
CONTROL[count:0..Max][carSize:0..MCar][buttonPressed:0..1]
    = (when (count < Max) 
            newPassenger  -> CONTROL[count+1][carSize][buttonPressed]
      |requestPassenger[n:1..MCar] -> CONTROL[count][n][buttonPressed]
      |when (carSize > 0 && count >= carSize) 
            getPassenger[carSize] -> CONTROL[count-carSize][0][0] //buttonPressed status set/reset to zero if a carriage successfully leaves.
      |when (carSize > 0 && count > 0 && count < carSize && buttonPressed == 1) 
            getPassenger[count] -> CONTROL [0][0][0]
      |when (carSize > 0 && count > 0 && count < carSize && buttonPressed == 0)
            goNow -> CONTROL[count][carSize][1]
      ).


// the coaster car requests N passengers and departs when the
// controller responds with getPassenger
COASTERCAR(N=MCar) 
    = (arrive -> requestPassenger[N] -> getPassenger[i:1..MCar] -> 
         if (i > N) then ERROR else (depart -> COASTERCAR))
      +{{requestPassenger,getPassenger}[1..MCar]}.

// controls access to the platform
PLATFORMACCESS = (arrive -> depart -> PLATFORMACCESS).

// this allows a car to depart on the press of a button if it contains at least one passenger.
BUTTON = (goNow -> BUTTON).

// system with two coaster cars with capacity two and three
||ROLLERCOASTER
         = (PASSENGERS 
           || car[1..2]::(CONTROLLER || PLATFORMACCESS || BUTTON) 
           || car[1]:COASTERCAR(2) 
           || car[2]:COASTERCAR(3)
           )
           /{newPassenger/car[1..2].newPassenger, goNow/car[1..2].goNow}.
